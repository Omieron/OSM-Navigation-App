/**
 * Ana uygulama baÅŸlatÄ±cÄ±
 * TÃ¼m modÃ¼lleri yÃ¼kler ve baÅŸlatÄ±r
 */
import EventBus from './utils/eventBus.js';
import config from './config.js';
import MapManager from './modules/mapManager.js';
import RouteSelector from './modules/routeSelector.js';
import RouteCalculator from './modules/routeCalculator.js';
import TrafficManager from './modules/TrafficManager.js'; // Ana trafik yÃ¶neticisi

// Sayfa yÃ¼klendiÄŸinde Ã§alÄ±ÅŸtÄ±r
document.addEventListener('DOMContentLoaded', function() {
  console.log('Navigasyon uygulamasÄ± baÅŸlatÄ±lÄ±yor...');
  
  // EventBus oluÅŸtur - tÃ¼m modÃ¼llerin iletiÅŸimi iÃ§in
  const eventBus = new EventBus();
  
  // ModÃ¼lleri baÅŸlat
  const mapManager = new MapManager(config, eventBus);
  const routeSelector = new RouteSelector(config, eventBus);
  const routeCalculator = new RouteCalculator(config, eventBus);
  const trafficManager = new TrafficManager(config, eventBus); // Trafik yÃ¶neticisini baÅŸlat

  // ðŸš€ DEBUG Ä°Ã‡Ä°N GLOBAL ERÄ°ÅžÄ°M - BURASI YENÄ°!
  window.app = {
    config: config,
    eventBus: eventBus,
    mapManager: mapManager,
    routeSelector: routeSelector,
    routeCalculator: routeCalculator,
    trafficManager: trafficManager
  };

  console.log('ðŸš€ Debug iÃ§in window.app oluÅŸturuldu:', window.app);
  
  // Zoom butonlarÄ±nÄ± baÄŸla
  document.getElementById('zoom-turkey').addEventListener('click', function() {
    eventBus.publish('map:zoomToLocation', {
      coords: config.map.initialView.turkey.center,
      zoom: config.map.initialView.turkey.zoom
    });
  });
  
  // Trafik butonunu baÄŸla
  document.getElementById('toggle-traffic').addEventListener('click', function() {
    eventBus.publish('traffic:toggle');
  });
  
  // Rota yÃ¼kleniyor durumu eventbusunu dinle
  eventBus.subscribe('route:loading', function(isLoading) {
    const loadingOverlay = document.getElementById('loading-overlay');
    
    if (isLoading) {
      // Hesaplama baÅŸladÄ±ÄŸÄ±nda
      // Overlay'i gÃ¶ster
      loadingOverlay.style.display = 'flex';
      
      // TÃ¼m tÄ±klama eventlerini devre dÄ±ÅŸÄ± bÄ±rakmak iÃ§in overlay'i gÃ¶ster
      document.body.classList.add('loading');
    } else {
      // Hesaplama bittiÄŸinde
      // Overlay'i gizle
      loadingOverlay.style.display = 'none';
      
      // TÄ±klama eventlerini tekrar aktif et
      document.body.classList.remove('loading');
    }
  });
  
  // Trafik yÃ¼kleniyor durumu eventbusunu dinle
  eventBus.subscribe('traffic:loading', function(isLoading) {
    // Trafik verisi yÃ¼klenirken basit bir gÃ¶sterge
    const trafficButton = document.getElementById('toggle-traffic');
    
    if (isLoading && trafficButton) {
      trafficButton.classList.add('loading');
      trafficButton.disabled = true;
    } else if (trafficButton) {
      trafficButton.classList.remove('loading');
      trafficButton.disabled = false;
    }
  });
  
  // Uygulama hazÄ±r olduÄŸunda EventBus aracÄ±lÄ±ÄŸÄ±yla bildir
  eventBus.publish('app:ready', {
    timestamp: Date.now()
  });
  
  // OSRM baÄŸlantÄ±sÄ±nÄ± test et
  testOSRMConnection();
  
  // TomTom API anahtarÄ±nÄ± kontrol et
  checkTomTomAPIKey();
});

/**
 * OSRM baÄŸlantÄ±sÄ±nÄ± kontrol eder
 */
function testOSRMConnection() {
  const statusText = document.createElement('div');
  statusText.id = 'api-status';
  statusText.style.position = 'absolute';
  statusText.style.bottom = '10px';
  statusText.style.right = '10px';
  statusText.style.padding = '5px 10px';
  statusText.style.borderRadius = '4px';
  statusText.style.fontSize = '12px';
  statusText.style.zIndex = '1000';
  statusText.textContent = 'OSRM baÄŸlantÄ±sÄ± kontrol ediliyor...';
  statusText.style.backgroundColor = '#FFF59D';
  document.body.appendChild(statusText);
  
  // OSRM baÄŸlantÄ± durumunu kontrol et
  const checkOSRM = async () => {
    try {
      console.log(`OSRM API kontrol ediliyor: ${config.api.baseUrl}`);
      
      // OSRM servis kontrolÃ¼ iÃ§in Ã¶rnek koordinatlar kullanarak geÃ§erli bir istek yap
      // Ä°stanbul'dan kÃ¼Ã§Ã¼k bir Ã¶rnek rota (KadÄ±kÃ¶y -> ÃœskÃ¼dar)
      const profile = 'car';
      const testCoords = '29.0320,40.9923;29.0158,41.0265';
      const testParams = 'overview=false';
      
      // GeÃ§erli bir OSRM isteÄŸi oluÅŸtur
      const url = `${config.api.baseUrl}${config.api.route}/${profile}/${testCoords}?${testParams}`;
      
      console.log(`OSRM test isteÄŸi: ${url}`);
      
      // Fetch ile baÄŸlantÄ±yÄ± kontrol et
      const response = await fetch(url, {
        method: 'GET',
        signal: AbortSignal.timeout(5000) // 5 saniye timeout
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      
      // YanÄ±tÄ± JSON olarak parse et
      const data = await response.json();
      
      // OSRM yanÄ±t kontrolÃ¼
      if (data.code !== 'Ok') {
        throw new Error(`OSRM yanÄ±t hatasÄ±: ${data.message || 'Bilinmeyen OSRM hatasÄ±'}`);
      }
      
      // BaÅŸarÄ±lÄ± mesajÄ± gÃ¶ster
      statusText.textContent = 'OSRM baÄŸlantÄ±sÄ± baÅŸarÄ±lÄ±';
      statusText.style.backgroundColor = '#A5D6A7';
      
      // 3 saniye sonra mesajÄ± gizle
      setTimeout(() => {
        statusText.style.opacity = '0';
        statusText.style.transition = 'opacity 1s';
      }, 3000);
      
    } catch (error) {
      console.error('OSRM API kontrol hatasÄ±:', error);
      statusText.textContent = 'OSRM baÄŸlantÄ±sÄ± baÅŸarÄ±sÄ±z!';
      statusText.style.backgroundColor = '#EF9A9A';
      
      // Hata detaylarÄ±nÄ± gÃ¶ster
      const errorDetails = document.createElement('div');
      errorDetails.style.fontSize = '10px';
      errorDetails.style.marginTop = '5px';
      errorDetails.textContent = error.message || 'Bilinmeyen hata';
      statusText.appendChild(errorDetails);
      
      // OSRM URL'sini gÃ¶ster
      const urlInfo = document.createElement('div');
      urlInfo.style.fontSize = '10px';
      urlInfo.style.marginTop = '5px';
      urlInfo.textContent = `URL: ${config.api.baseUrl}`;
      statusText.appendChild(urlInfo);
      
      // Docker kontrol ipucu
      const dockerTip = document.createElement('div');
      dockerTip.style.fontSize = '10px';
      dockerTip.style.marginTop = '5px';
      dockerTip.textContent = 'Docker Ã¼zerinde OSRM servisinin Ã§alÄ±ÅŸtÄ±ÄŸÄ±ndan emin olun.';
      statusText.appendChild(dockerTip);
      
      // Config ipucu
      const configTip = document.createElement('div');
      configTip.style.fontSize = '10px';
      configTip.style.marginTop = '5px';
      configTip.textContent = 'config.js dosyasÄ±nda baseUrl ayarÄ±nÄ± gÃ¼ncelleyin.';
      statusText.appendChild(configTip);
    }
  };
  
  // API kontrolÃ¼nÃ¼ baÅŸlat
  checkOSRM();
}

/**
 * TomTom API anahtarÄ±nÄ± kontrol eder
 */
function checkTomTomAPIKey() {
  // API anahtarÄ±nÄ±n ayarlanÄ±p ayarlanmadÄ±ÄŸÄ±nÄ± kontrol et
  if (!config.traffic || !config.traffic.apiKey || config.traffic.apiKey === 'YOUR_TOMTOM_API_KEY_HERE') {
    console.warn('TomTom API anahtarÄ± ayarlanmamÄ±ÅŸ!');
    
    // UyarÄ± mesajÄ± oluÅŸtur
    const warningDiv = document.createElement('div');
    warningDiv.style.position = 'absolute';
    warningDiv.style.top = '10px';
    warningDiv.style.left = '50%';
    warningDiv.style.transform = 'translateX(-50%)';
    warningDiv.style.padding = '10px 15px';
    warningDiv.style.backgroundColor = '#FFECB3';
    warningDiv.style.color = '#E65100';
    warningDiv.style.borderRadius = '4px';
    warningDiv.style.zIndex = '1000';
    warningDiv.style.boxShadow = '0 2px 4px rgba(0,0,0,0.2)';
    warningDiv.textContent = 'TomTom API anahtarÄ± tanÄ±mlanmamÄ±ÅŸ! Trafik verisi gÃ¶sterilemeyecek.';
    
    // Kapatma butonu ekle
    const closeButton = document.createElement('button');
    closeButton.textContent = 'Ã—';
    closeButton.style.position = 'absolute';
    closeButton.style.right = '5px';
    closeButton.style.top = '5px';
    closeButton.style.border = 'none';
    closeButton.style.background = 'none';
    closeButton.style.fontSize = '16px';
    closeButton.style.cursor = 'pointer';
    closeButton.style.color = '#E65100';
    
    closeButton.addEventListener('click', () => {
      document.body.removeChild(warningDiv);
    });
    
    warningDiv.appendChild(closeButton);
    document.body.appendChild(warningDiv);
    
    // Trafik butonunu devre dÄ±ÅŸÄ± bÄ±rak
    const trafficButton = document.getElementById('toggle-traffic');
    if (trafficButton) {
      trafficButton.disabled = true;
      trafficButton.title = 'TomTom API anahtarÄ± gerekiyor';
    }
  }
}